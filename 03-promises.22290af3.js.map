{"mappings":"oeA8BA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SACvC,IAAIC,EAAQF,SAASC,cAAc,uBAC/BE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBAmCpC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAgB,C,SAAEL,EAAUM,MAAAL,GAElC,OAAO,IAAIM,SAAQ,CAACC,EAASC,KACvBP,GACFM,EAAQH,GAEVI,EAAOJ,EAAc,G,CAzCzBZ,EAAQiB,iBAAiB,UAEzB,SAAsBC,GAOpB,GANAA,EAAEC,iBAEFhB,EAAQiB,OAAOF,EAAEG,cAAcR,MAAMS,OACrClB,EAAOgB,OAAOF,EAAEG,cAAcE,KAAKD,OACnCjB,EAASe,OAAOF,EAAEG,cAAcG,OAAOF,OAEnCnB,GAAS,GAAKC,GAAQ,GAAKC,EAAS,EACtC,IAAK,IAAIoB,EAAW,EAAGA,GAAYpB,EAAQoB,GAAY,EACrDtB,GAASC,EACTE,EAAcmB,EAAUtB,GACrBuB,MAAK,EAACnB,SAAEA,EAAUM,MAAAc,MACjBC,YAAW,KACT9B,EAAA+B,OAAOC,QAAQ,uBAAqBvB,QAAiBoB,MAAW,CAC5DI,SAAO,GACT,GACDJ,EAAM,IAEVK,OAAM,EAACzB,SAAEA,EAAUM,MAAAoB,MAClBL,YAAW,KACT9B,EAAA+B,OAAOK,QAAQ,sBAAoB3B,QAAe0B,MAAW,CAC3DF,SAAS,GACT,GACDE,EAAM,SAIfnC,EAAA+B,OAAOM,QAAQ,gB","sources":["src/js/03-promises.js"],"sourcesContent":["// Задание 3 - генератор промисов\n// Выполняй это задание в файлах 03-promises.html и 03-promises.js. Посмотри демо видео работы генератора промисов.\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// Библиотека уведомлений\n// ВНИМАНИЕ\n// Этот функционал не обязателен при сдаче задания, но будет хорошей дополнительной практикой.\n\n// Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nlet delay = document.querySelector('input[name=\"delay\"]');\nlet step = document.querySelector('input[name=\"step\"]');\nlet amount = document.querySelector('input[name=\"amount\"]');\n\nformRef.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  delay = Number(e.currentTarget.delay.value);\n  step = Number(e.currentTarget.step.value);\n  amount = Number(e.currentTarget.amount.value);\n\n  if (delay >= 0 && step >= 0 && amount > 0) {\n    for (let position = 1; position <= amount; position += 1) {\n      delay += step;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          setTimeout(() => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n              useIcon: false,\n            });\n          }, delay);\n        })\n        .catch(({ position, delay }) => {\n          setTimeout(() => {\n            Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n              useIcon: false,\n            });\n          }, delay);\n        });\n    }\n  } else {\n    Notify.warning('Put value > 0');\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const objectPromise = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(objectPromise);\n    }\n    reject(objectPromise);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","objectPromise","delay","Promise","resolve","reject","addEventListener","e","preventDefault","Number","currentTarget","value","step","amount","position1","then","delay1","setTimeout","Notify","success","useIcon","catch","delay2","failure","warning"],"version":3,"file":"03-promises.22290af3.js.map"}